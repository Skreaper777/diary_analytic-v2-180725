document.addEventListener("DOMContentLoaded", async function () {
  console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");

  // –∑–∞–±–∏—Ä–∞–µ–º JSON –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
  const VALUES_MAP = JSON.parse(document.body.dataset.valuesMap || "{}");
  window.VALUES_MAP = VALUES_MAP;
  console.log("üì¶ –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±—ç–∫–µ–Ω–¥–∞:", VALUES_MAP);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ input
  const dateInput = document.getElementById("date-input");
  const dateValue = dateInput ? dateInput.value : "";
  console.log("üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", dateValue);

  // –í—Å–µ –±–ª–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const parameterBlocks = document.querySelectorAll(".parameter-block");

  parameterBlocks.forEach((block) => {
    const paramKey = block.getAttribute("data-key");
    const buttons = block.querySelectorAll(".value-button");
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    console.log(`\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${paramKey}:`);
    console.log(`  üîç –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞:`, window.VALUES_MAP[paramKey]);
    
    buttons.forEach((btn) => {
      const value = btn.getAttribute("data-value");
      const isSelected = btn.classList.contains("selected");
      console.log(`  - –ö–Ω–æ–ø–∫–∞ ${value}: ${isSelected ? '‚úÖ –≤—ã–±—Ä–∞–Ω–∞' : '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    buttons.forEach((btn) => {
      btn.addEventListener("click", async function () {
        const selectedValue = parseInt(this.getAttribute("data-value"));
        const isAlreadySelected = this.classList.contains("selected");
        // paramKey –≤—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –∏–∑ –±–ª–æ–∫–∞, –∞ –Ω–µ –∏–∑ –∫–Ω–æ–ø–∫–∏!
        const paramKey = block.getAttribute("data-key");

        if (isAlreadySelected) {
          // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ ‚Äî —É–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const payload = {
            parameter: paramKey,
            value: null,
            date: dateValue,
          };
          console.log("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:", payload);
          try {
            const response = await fetch("/update_value/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": getCookie("csrftoken"),
              },
              body: JSON.stringify(payload),
            });
            if (response.ok) {
              console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${paramKey}`);
              this.classList.remove("selected");
              loadPredictions();
            } else {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${paramKey}`);
            }
          } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          }
          return;
        }

        // 1. –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        buttons.forEach((b) => b.classList.remove("selected"));
        this.classList.add("selected");

        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const payload = {
          parameter: paramKey,
          value: selectedValue,
          date: dateValue,
        };
        console.log("üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", payload);
        try {
          const response = await fetch("/update_value/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-CSRFToken": getCookie("csrftoken"),
            },
            body: JSON.stringify(payload),
          });

          if (response.ok) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${paramKey} = ${selectedValue}`);
            loadPredictions();
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${paramKey}`);
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
        }
      });
    });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  parameterBlocks.forEach(block => {
      const key = block.dataset.key;
      const selectedButton = block.querySelector('.value-button.selected');
      console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä ${key}:`, selectedButton ? `–≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${selectedButton.dataset.value}` : '–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è');
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
  loadPredictions();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
  initAllParameterCharts(dateValue);
  setupChartsToggleBtn();
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–≤
  setChartsVisible(loadChartsVisibleState());

  const btn = document.getElementById('retrain-models-btn');
  if (btn) {
    btn.addEventListener('click', async function() {
      btn.disabled = true;
      btn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
      try {
        const res = await fetch('/retrain_models_all/', {
          method: 'POST',
          headers: {
            'X-CSRFToken': getCookie('csrftoken'),
            'Content-Type': 'application/json',
          },
        });
        const data = await res.json();
        if (data.status === 'ok') {
          alert('–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!');
        } else if (data.status === 'error') {
          // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–æ –ø–æ–∫–∞ alert
          alert('–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:\n' + (data.details || []).join('\n'));
        } else {
          alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (e) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
      btn.disabled = false;
      btn.textContent = 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã';
    });
  }

  // –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é)
  if (dateInput) {
    dateInput.addEventListener('change', function() {
      setTimeout(() => {
        // –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è, –Ω–æ –µ—Å–ª–∏ SPA ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        // initAllParameterCharts(this.value);
      }, 100);
    });
  }

  setupPredictionsToggleBtn();
  setPredictionsVisible(loadPredictionsVisibleState());

  setupParamFilterInput();

  setupChartsMinDateInput();

  // --- –§–æ–∫—É—Å ---
  setupFocusToggleBtn();

  // --- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ ---
  const sortBtnSum = document.querySelector('.sort-btn[data-sort="sum"]');

// --- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º ---
const sortBtnPercent = document.querySelector('.sort-btn[data-sort="sum-percent"]');
const sortArrowPercent = sortBtnPercent ? sortBtnPercent.querySelector('.sort-arrow') : null;
let sortStatePercent = 0;

function getPercentValue(block) {
  const percentBlock = block.querySelector('.param-sum-block-range');
  if (!percentBlock) return -1;
  const val = percentBlock.textContent.trim().replace('%', '');
  const num = parseFloat(val.replace(',', '.'));
  return isNaN(num) ? -1 : num;
}

function sortByPercent(direction) {
  const blocks = Array.from(document.querySelectorAll('.parameter-block'));
  blocks.sort((a, b) => {
    const aVal = getPercentValue(a);
    const bVal = getPercentValue(b);
    return direction === 1 ? bVal - aVal : aVal - bVal;
  });

  const container = document.querySelector('.parameters-list');
  blocks.forEach((block) => container.appendChild(block));
}

if (sortBtnPercent) {
  sortBtnPercent.addEventListener('click', () => {
    sortStatePercent = (sortStatePercent + 1) % 3;
    if (sortArrowPercent) {
      sortArrowPercent.innerHTML = sortStatePercent === 1 ? '‚Üì' : sortStatePercent === 2 ? '‚Üë' : '';
    }

    if (sortStatePercent === 0) return;

    const maxWaitMs = 7000;
    const checkIntervalMs = 300;
    let waited = 0;

    const interval = setInterval(() => {
      const ready = Array.from(document.querySelectorAll('.param-sum-block-range'))
        .every(el => el.textContent.trim().endsWith('%'));

      if (ready || waited >= maxWaitMs) {
        clearInterval(interval);
        sortByPercent(sortStatePercent === 1 ? 1 : -1);
      }

      waited += checkIntervalMs;
    }, checkIntervalMs);
  });
}
  const sortArrowSum = sortBtnSum ? sortBtnSum.querySelector('.sort-arrow') : null;
  let sortStateSum = 0;

  function getSumValue(block) {
    const sumBlock = block.querySelector('.param-sum-block');
    if (!sumBlock) return -1;
    const val = sumBlock.textContent.trim();
    const num = parseFloat(val.replace(',', '.'));
    return isNaN(num) ? -1 : num;
  }

  function sortBySum(direction) {
    const blocks = Array.from(document.querySelectorAll('.parameter-block'));
    blocks.sort((a, b) => {
      const valA = getSumValue(a);
      const valB = getSumValue(b);
      if (valA < valB) return direction === 1 ? -1 : 1;
      if (valA > valB) return direction === 1 ? 1 : -1;
      return 0;
    });
    const firstBlock = blocks[0];
    const parent = firstBlock.parentNode;
    blocks.forEach(block => parent.appendChild(block));
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–Ω–∏–∑
    const form = parent.querySelector('form[method="post"]');
    if (form) parent.appendChild(form);
  }

  function updateArrowSum() {
    if (!sortArrowSum) return;
    if (sortStateSum === 1) {
      sortArrowSum.textContent = '‚ñ≤';
      sortBtnSum.classList.add('active');
    } else if (sortStateSum === 2) {
      sortArrowSum.textContent = '‚ñº';
      sortBtnSum.classList.add('active');
    } else {
      sortArrowSum.textContent = '';
      sortBtnSum.classList.remove('active');
    }
  }

  if (sortBtnSum) {
    sortBtnSum.addEventListener('click', function() {
      resetAllSortStates('sum');
      sortStateSum = (sortStateSum + 1) % 3;
      // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
      sortState = 0;
      sortStateValue = 0;
      sortStatePred = 0;
      updateArrow();
      updateArrowValue();
      updateArrowPred();
      if (sortStateSum === 1) {
        sortBySum(1);
        saveSortState('sum', 1);
      } else if (sortStateSum === 2) {
        sortBySum(-1);
        saveSortState('sum', -1);
      } else {
        window.location.reload();
        clearSortState();
      }
      updateArrowSum();
      updateParameterSums();
    });
  }

  // --- –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫ (–¥–æ–±–∞–≤–ª—è–µ–º sum) ---
  function resetAllSortStates(except) {
    if (except !== 'name') {
      sortState = 0;
      if (typeof updateArrow === 'function') updateArrow();
      if (typeof sortBtn !== 'undefined') sortBtn.classList.remove('active');
    }
    if (except !== 'value') {
      sortStateValue = 0;
      if (typeof updateArrowValue === 'function') updateArrowValue();
      if (typeof sortBtnValue !== 'undefined') sortBtnValue.classList.remove('active');
    }
    if (except !== 'prediction') {
      sortStatePred = 0;
      if (typeof updateArrowPred === 'function') updateArrowPred();
      if (typeof sortBtnPred !== 'undefined') sortBtnPred.classList.remove('active');
    }
    if (except !== 'sum') {
      sortStateSum = 0;
      if (typeof updateArrowSum === 'function') updateArrowSum();
      if (typeof sortBtnSum !== 'undefined') sortBtnSum.classList.remove('active');
    }
  }

  // --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–±–∞–≤–ª—è–µ–º sum) ---
  document.addEventListener('DOMContentLoaded', function() {
    const state = loadSortState && loadSortState();
    if (!state) return;
    if (state.type === 'name') {
      sortState = state.direction === 1 ? 1 : 2;
      if (typeof sortByName === 'function') sortByName(state.direction);
      if (typeof updateArrow === 'function') updateArrow();
    } else if (state.type === 'value') {
      sortStateValue = state.direction === 1 ? 1 : 2;
      if (typeof sortByValue === 'function') sortByValue(state.direction);
      if (typeof updateArrowValue === 'function') updateArrowValue();
    } else if (state.type === 'prediction') {
      sortStatePred = state.direction === 1 ? 1 : 2;
      if (typeof sortByPrediction === 'function') sortByPrediction(state.direction);
      if (typeof updateArrowPred === 'function') updateArrowPred();
    } else if (state.type === 'sum') {
      sortStateSum = state.direction === 1 ? 1 : 2;
      if (typeof sortBySum === 'function') sortBySum(state.direction);
      if (typeof updateArrowSum === 'function') updateArrowSum();
    }
  });

  // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∏–º–µ–Ω–∏ ---
  window.sortBtn = document.querySelector('.sort-btn[data-sort="name"]');
  window.sortArrow = sortBtn ? sortBtn.querySelector('.sort-arrow') : null;
  // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ---
  window.sortBtnValue = document.querySelector('.sort-btn[data-sort="value"]');
  window.sortArrowValue = sortBtnValue ? sortBtnValue.querySelector('.sort-arrow') : null;
  // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É ---
  window.sortBtnPred = document.querySelector('.sort-btn[data-sort="prediction"]');
  window.sortArrowPred = sortBtnPred ? sortBtnPred.querySelector('.sort-arrow') : null;

  // --- –ö–Ω–æ–ø–∫–∞ def ---
  const defBtn = document.getElementById('def-btn');
  if (defBtn) {
    defBtn.addEventListener('click', async function() {
      defBtn.disabled = true;
      defBtn.textContent = '‚è≥ def...';
      try {
        let count = 0;
        for (const block of document.querySelectorAll('.parameter-block')) {
          const paramKey = block.getAttribute('data-key');
          const paramTitle = block.querySelector('.param-title').textContent;
          // –ò—â–µ–º "def" –∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
          const match = paramTitle.match(/def\s*(\d+)/i);
          if (match) {
            const defValue = parseInt(match[1], 10);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const selectedBtn = block.querySelector('.value-button.selected');
            if (!selectedBtn) {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
              const payload = {
                parameter: paramKey,
                value: defValue,
                date: dateValue,
              };
              try {
                const response = await fetch('/update_value/', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken'),
                  },
                  body: JSON.stringify(payload),
                });
                if (response.ok) {
                  // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                  const btn = block.querySelector(`.value-button[data-value="${defValue}"]`);
                  if (btn) btn.classList.add('selected');
                  count++;
                }
              } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:', e);
              }
            }
          }
        }
        if (count > 0) {
          loadPredictions();
          alert(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${count}`);
        } else {
          alert('–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å def –∏–ª–∏ –≤—Å–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.');
        }
      } finally {
        defBtn.disabled = false;
        defBtn.textContent = 'def';
      }
    });
  }
});

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    const cookies = document.cookie.split(";");
    for (let i = 0; i < cookies.length; i++) {
      const cookie = cookies[i].trim();
      if (cookie.startsWith(name + "=")) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}
// üì° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadPredictions() {
  // üïì 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤ –ø–æ–ª–µ <input type="date">
  const date = document.getElementById("date-input")?.value;
  console.log("[loadPredictions] –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:", date);
  if (!date) {
    console.warn("[loadPredictions] –ù–µ—Ç –¥–∞—Ç—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    return; // –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
  }

  try {
    // üåê 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /get_predictions/?date=...
    console.log(`[loadPredictions] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: /get_predictions/?date=${encodeURIComponent(date)}`);
    const res = await fetch(`/get_predictions/?date=${encodeURIComponent(date)}`);

    // üßæ 3. –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    const data = await res.json();
    console.log("[loadPredictions] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

    // –ü—Ä–∏–º–µ—Ä: data = { "ustalost_base": 3.4, "toshn_base": 1.2 }

    // üîÅ 4. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    Object.entries(data).forEach(([key, value]) => {
      console.log(`[loadPredictions] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–ª—é—á: ${key}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
      // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "_base" ‚Üí –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "ustalost")
      const paramKey = key.replace("_base", "");
      console.log(`[loadPredictions] paramKey: ${paramKey}`);

      // üéØ –ò—â–µ–º –±–ª–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
      const target = document.getElementById(`predicted-${paramKey}`);          // –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
      const deltaTarget = document.getElementById(`predicted-delta-${paramKey}`); // –¥–µ–ª—å—Ç–∞

      if (!target) {
        console.warn(`[loadPredictions] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç predicted-${paramKey}`);
      }
      if (!deltaTarget) {
        console.warn(`[loadPredictions] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç predicted-delta-${paramKey}`);
      }

      if (target) {
        // üìå 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const selectedButton = document
          .querySelector(`.parameter-block[data-key="${paramKey}"] .value-button.selected`);
        if (!selectedButton) {
          console.log(`[loadPredictions] –î–ª—è ${paramKey} –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ (–∏–ª–∏ NaN, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
        const current = parseFloat(selectedButton?.getAttribute("data-value") || "NaN");
        console.log(`[loadPredictions] –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${paramKey}:`, current);

        // üîÅ 6. –°—á–∏—Ç–∞–µ–º –¥–µ–ª—å—Ç—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const delta = isNaN(current) ? null : value - current;
        const absDelta = delta !== null ? Math.abs(delta) : null;
        console.log(`[loadPredictions] –ü—Ä–æ–≥–Ω–æ–∑: ${value}, –î–µ–ª—å—Ç–∞: ${delta}, –ê–±—Å. –¥–µ–ª—å—Ç–∞: ${absDelta}`);

        // üì• 7. –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –¥–µ–ª—å—Ç—ã
        target.textContent = `–ü—Ä–æ–≥–Ω–æ–∑: ${value.toFixed(1)}`;
        if (deltaTarget) {
          deltaTarget.textContent = delta !== null ? `Œî ${delta.toFixed(1)}` : "";
        }

        // üé® 8. –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        let color = "gray";
        if (absDelta !== null) {
          if (absDelta < 1) color = "green";
          else if (absDelta <= 2) color = "yellow";
          else color = "red";
        }
        console.log(`[loadPredictions] –¶–≤–µ—Ç –¥–ª—è ${paramKey}:`, color);

        // üü¢ 9. –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç (–¥–ª—è CSS-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏)
        target.dataset.color = color;
      }
    });

    // ‚úÖ –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å: —É—Å–ø–µ—Ö
    console.log("[loadPredictions] –ü—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:", data);

  } catch (err) {
    // ‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error("[loadPredictions] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", err);
  }
}

// --- –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
async function loadParameterHistory(paramKey, dateStr) {
  const chartId = `history-chart-${paramKey}`;
  const emptyId = `history-chart-empty-${paramKey}`;
  const ctx = document.getElementById(chartId);
  const emptyDiv = document.getElementById(emptyId);
  if (!ctx) return;

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (ctx._chartInstance) {
    ctx._chartInstance.destroy();
    ctx._chartInstance = null;
  }

  try {
    const res = await fetch(`/api/parameter_history/?param=${encodeURIComponent(paramKey)}&date=${encodeURIComponent(dateStr)}`);
    const data = await res.json();
    if (!data.dates || !data.values || data.dates.length === 0) {
      ctx.style.display = 'none';
      if (emptyDiv) emptyDiv.style.display = '';
      return;
    }
    ctx.style.display = '';
    if (emptyDiv) emptyDiv.style.display = 'none';

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
    const minDate = loadChartsMinDate();
    let filteredDates = data.dates;
    let filteredValues = data.values;
    if (minDate) {
      const idx = data.dates.findIndex(date => date >= minDate);
      if (idx !== -1) {
        filteredDates = data.dates.slice(idx);
        filteredValues = data.values.slice(idx);
      } else {
        filteredDates = [];
        filteredValues = [];
      }
    }
    const monthsRu = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    const labels = filteredDates.map(d => {
      const [y, m, d2] = d.split('-');
      return `${parseInt(d2,10)} ${monthsRu[parseInt(m,10)-1]}`;
    });
    ctx._chartInstance = new window.Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: '',
          data: filteredValues,
          borderColor: '#28a745',
          backgroundColor: 'rgba(40,167,69,0.10)',
          pointRadius: 2.5,
          pointBackgroundColor: '#28a745',
          pointBorderColor: '#222',
          borderWidth: 2,
          tension: 0.25,
          fill: true,
          spanGaps: true,
          segment: {
            borderColor: ctx => {
              const v = ctx.p0.parsed.y;
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ paramKey "pos" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
              const isPositiveParam = paramKey.toLowerCase().includes('pos');
              // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
              if (isPositiveParam) {
                  return v >= 3 ? '#28a745' : '#e0a800'; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
              } else {
                  return v >= 3 ? '#e0a800' : '#28a745'; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
              }
            },
            backgroundColor: ctx => {
              const v = ctx.p0.parsed.y;
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ paramKey "pos" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
              const isPositiveParam = paramKey.toLowerCase().includes('pos');
              // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ü–≤–µ—Ç–∞ –∑–∞–ª–∏–≤–∫–∏, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
               if (isPositiveParam) {
                  return v >= 3 ? 'rgba(40,167,69,0.10)' : 'rgba(224,168,0,0.10)'; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
               } else {
                  return v >= 3 ? 'rgba(224,168,0,0.10)' : 'rgba(40,167,69,0.10)'; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
               }
            }
          }
        },
        // --- –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ ---
        {
          label: '–¢—Ä–µ–Ω–¥',
          data: (function() {
            // –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ filteredValues
            const n = filteredValues.length;
            if (n < 2) return Array(n).fill(null);
            let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
            for (let i = 0; i < n; i++) {
              sumX += i;
              sumY += filteredValues[i];
              sumXY += i * filteredValues[i];
              sumXX += i * i;
            }
            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;
            return Array.from({length: n}, (_, i) => Math.round((slope * i + intercept) * 100) / 100);
          })(),
          borderColor: 'rgba(0,123,255,1)',
          backgroundColor: 'rgba(255,152,0,0.10)',
          borderWidth: 1,
          borderDash: [5, 5],
          pointRadius: 0,
          fill: false,
          tension: 0,
          spanGaps: true,
          order: 2,
        }
        ]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: true }
        },
        scales: {
          x: {
            ticks: { color: '#aaa', font: { size: 8 } },
            grid: { color: '#222' }
          },
          y: {
            min: 0, max: 5,
            ticks: { color: '#aaa', font: { size: 8 }, stepSize: 1 },
            grid: { color: '#222' }
          }
        }
      }
    });
  } catch (e) {
    ctx.style.display = 'none';
    if (emptyDiv) emptyDiv.style.display = '';
  }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
function initAllParameterCharts(dateStr) {
  document.querySelectorAll('.parameter-block').forEach(block => {
    const paramKey = block.getAttribute('data-key');
    loadParameterHistory(paramKey, dateStr);
  });
  fillChartsMinDateInput(loadChartsMinDate());
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
function setChartsVisible(visible) {
  document.querySelectorAll('.history-chart-block').forEach(block => {
    block.style.display = visible ? '' : 'none';
  });
  const btn = document.getElementById('charts-toggle-btn');
  if (btn) btn.classList.toggle('active', visible);
}

function saveChartsVisibleState(visible) {
  localStorage.setItem('diary_charts_visible', visible ? '1' : '0');
}

function loadChartsVisibleState() {
  const val = localStorage.getItem('diary_charts_visible');
  if (val === null) return true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã
  return val === '1';
}

function setupChartsToggleBtn() {
  const btn = document.getElementById('charts-toggle-btn');
  if (!btn) return;
  btn.addEventListener('click', function() {
    const nowVisible = !loadChartsVisibleState();
    setChartsVisible(nowVisible);
    saveChartsVisibleState(nowVisible);
  });
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ---
function setPredictionsVisible(visible) {
  document.querySelectorAll('.prediction-wrapper').forEach(block => {
    block.style.display = visible ? '' : 'none';
  });
  const btn = document.getElementById('predictions-toggle-btn');
  if (btn) btn.classList.toggle('active', visible);
}

function savePredictionsVisibleState(visible) {
  localStorage.setItem('diary_predictions_visible', visible ? '1' : '0');
}

function loadPredictionsVisibleState() {
  const val = localStorage.getItem('diary_predictions_visible');
  if (val === null) return true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑—ã –≤–∫–ª—é—á–µ–Ω—ã
  return val === '1';
}

function setupPredictionsToggleBtn() {
  const btn = document.getElementById('predictions-toggle-btn');
  if (!btn) return;
  btn.addEventListener('click', function() {
    const nowVisible = !loadPredictionsVisibleState();
    setPredictionsVisible(nowVisible);
    savePredictionsVisibleState(nowVisible);
  });
}

// --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É ---
function filterParameterBlocks(filter) {
  const blocks = document.querySelectorAll('.parameter-block');
  if (!filter || !filter.trim()) {
    blocks.forEach(b => b.style.display = '');
    return;
  }
  const terms = filter.toLowerCase().split(/\s+/).filter(Boolean);
  
  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –≤–∫–ª—é—á–∞–µ–º—ã–µ (AND), –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ (NOT) –∏ OR-—Ç–µ—Ä–º–∏–Ω—ã
  const includedTerms = terms.filter(term => !term.startsWith('-') && !term.startsWith('+'));
  const excludedTerms = terms
    .filter(term => term.startsWith('-'))
    .map(term => term.slice(1));
  const orTerms = terms
    .filter(term => term.startsWith('+'))
    .map(term => term.slice(1));

  blocks.forEach(block => {
    const title = block.querySelector('.param-title').textContent.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∫–ª—é—á–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (AND)
    const hasAllIncluded = includedTerms.length === 0 || 
      includedTerms.every(term => title.includes(term));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –∏—Å–∫–ª—é—á–∞–µ–º—ã–π —Ç–µ—Ä–º–∏–Ω –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (NOT)
    const hasNoExcluded = excludedTerms.length === 0 || 
      !excludedTerms.some(term => title.includes(term));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω OR-—Ç–µ—Ä–º–∏–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (OR)
    const hasAnyOr = orTerms.length === 0 || 
      orTerms.some(term => title.includes(term));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω OR-—Ç–µ—Ä–º–∏–Ω, —Ç–æ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º
    // (—Ç–æ –µ—Å—Ç—å: (AND) –∏ (OR) –∏ (NOT))
    // –ï—Å–ª–∏ OR-—Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ—Ç, —Ç–æ —Ç–æ–ª—å–∫–æ (AND) –∏ (NOT)
    const show = hasAllIncluded && hasNoExcluded && hasAnyOr;
    block.style.display = show ? '' : 'none';
  });
}

function saveParamFilterState(val) {
  localStorage.setItem('diary_param_filter', val);
}

function loadParamFilterState() {
  return localStorage.getItem('diary_param_filter') || '';
}

function setupParamFilterInput() {
  const input = document.getElementById('param-filter-input');
  if (!input) return;
  input.value = loadParamFilterState();
  filterParameterBlocks(input.value);
  input.addEventListener('input', function() {
    filterParameterBlocks(this.value);
    saveParamFilterState(this.value);
  });
  // --- –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ ---
  const clearBtn = document.querySelector('.filter-clear-btn');
  if (clearBtn) {
    clearBtn.addEventListener('click', function() {
      input.value = '';
      filterParameterBlocks('');
      saveParamFilterState('');
      input.focus();
    });
  }
}

// --- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∏–Ω–≤–µ—Ä—Å–∏—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫ ---
function updateArrow() {
  if (sortState === 1) {
    sortArrow.textContent = '‚ñº'; // ‚ñº ‚Äî –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    sortBtn.classList.add('active');
  } else if (sortState === 2) {
    sortArrow.textContent = '‚ñ≤'; // ‚ñ≤ ‚Äî –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sortBtn.classList.add('active');
  } else {
    sortArrow.textContent = '';
    sortBtn.classList.remove('active');
  }
}

function updateArrowValue() {
  if (sortStateValue === 1) {
    sortArrowValue.textContent = '‚ñº';
    sortBtnValue.classList.add('active');
  } else if (sortStateValue === 2) {
    sortArrowValue.textContent = '‚ñ≤';
    sortBtnValue.classList.add('active');
  } else {
    sortArrowValue.textContent = '';
    sortBtnValue.classList.remove('active');
  }
}

function updateArrowPred() {
  if (sortStatePred === 1) {
    sortArrowPred.textContent = '‚ñº';
    sortBtnPred.classList.add('active');
  } else if (sortStatePred === 2) {
    sortArrowPred.textContent = '‚ñ≤';
    sortBtnPred.classList.add('active');
  } else {
    sortArrowPred.textContent = '';
    sortBtnPred.classList.remove('active');
  }
}

// --- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
function saveChartsMinDate(val) {
  localStorage.setItem('diary_charts_min_date', val);
}

function loadChartsMinDate() {
  return localStorage.getItem('diary_charts_min_date') || '';
}

function setupChartsMinDateInput() {
  const input = document.getElementById('charts-min-date');
  if (!input) return;
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ localStorage
  fillChartsMinDateInput(loadChartsMinDate());
  input.addEventListener('change', function() {
    saveChartsMinDate(this.value);
    initAllParameterCharts(document.getElementById('date-input').value);
    updateParameterSums(); // –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É–º–º—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
  });
}

// --- fillChartsMinDateInput: –≤—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ localStorage ---
async function fillChartsMinDateInput(selectedDate) {
  const input = document.getElementById('charts-min-date');
  if (!input) return;
  try {
    const firstBlock = document.querySelector('.parameter-block');
    if (!firstBlock) return;
    const paramKey = firstBlock.getAttribute('data-key');
    const dateInput = document.getElementById('date-input');
    const toDate = dateInput ? dateInput.value : '';
    const res = await fetch(`/api/parameter_history/?param=${encodeURIComponent(paramKey)}&date=${encodeURIComponent(toDate)}`);
    const data = await res.json();
    if (!data.dates || data.dates.length === 0) {
      input.value = '';
      input.min = '';
      input.max = '';
      input.disabled = true;
      return;
    }
    input.disabled = false;
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ localStorage –∏–ª–∏ –∏–∑ selectedDate
    const savedMinDate = loadChartsMinDate();
    if (savedMinDate && data.dates.includes(savedMinDate)) {
      input.value = savedMinDate;
    } else if (selectedDate && data.dates.includes(selectedDate)) {
      input.value = selectedDate;
      saveChartsMinDate(selectedDate);
    } else {
      input.value = data.dates[0];
      saveChartsMinDate(data.dates[0]);
    }
  } catch {}
}

// --- –°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã ---
async function updateParameterSums() {
  const minDateInput = document.getElementById('charts-min-date');
  const dateInput = document.getElementById('date-input');
  const minDate = minDateInput ? minDateInput.value : '';
  const toDate = dateInput ? dateInput.value : '';

  document.querySelectorAll('.parameter-block').forEach(async (block) => {
    const paramKey = block.getAttribute('data-key');
    const sumBlock = block.querySelector('.param-sum-block');
    const sumBlockRange = block.querySelector('.param-sum-block-range');
    if (!sumBlock) return;

    try {
      const res = await fetch(`/api/parameter_history/?param=${encodeURIComponent(paramKey)}&date=${encodeURIComponent(toDate)}`);
      const data = await res.json();
      if (!data.dates || !data.values || data.dates.length === 0) {
        sumBlock.textContent = '';
        if (sumBlockRange) sumBlockRange.textContent = '';
        return;
      }

      // --- –ù–ê–ß–ê–õ–û: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É [minDate - toDate]
      let rangeStartIdx = 0;
      if (minDate) {
        rangeStartIdx = data.dates.findIndex(date => date >= minDate);
        if (rangeStartIdx === -1) rangeStartIdx = data.dates.length; // –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ø–∞–¥—ë—Ç
      }

      const rangeValues = data.values.slice(rangeStartIdx);
      const rangeDates = data.dates.slice(rangeStartIdx);
      // --- –ö–û–ù–ï–¶: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞

      // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º null/NaN)
      const sum = rangeValues.reduce((acc, v) => acc + (typeof v === 'number' && !isNaN(v) ? v : 0), 0);
      sumBlock.textContent = sum ? Math.round(sum) : '0';

      // --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Å—É–º–º–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç ---
      if (sumBlockRange) {
        const rangeSum = rangeValues.reduce((acc, v) => acc + (typeof v === 'number' && !isNaN(v) ? v : 0), 0);
        const daysCount = rangeDates.length;
        if (daysCount > 0) {
          const percent = Math.round((rangeSum / (4 * daysCount)) * 100);
          sumBlockRange.textContent = percent + '%';

          // --- –¶–≤–µ—Ç –ø–æ —à–∫–∞–ª–µ
          const paramTitle = block.querySelector('.param-title')?.textContent || '';
          let color = '';
          if (/pos/i.test(paramTitle)) {
            if (percent <= 10) color = '#dc3545';
            else if (percent <= 20) color = '#ff3c00';
            else if (percent <= 40) color = '#ff8800';
            else if (percent <= 65) color = '#e0a800';
            else if (percent <= 80) color = '#28a745';
            else color = '#7fd428';
          } else {
            if (percent <= 10) color = '#7fd428';
            else if (percent <= 20) color = '#28a745';
            else if (percent <= 40) color = '#e0a800';
            else if (percent <= 65) color = '#ff8800';
            else if (percent <= 80) color = '#ff3c00';
            else color = '#dc3545';
          }

          sumBlockRange.style.background = color;
          sumBlockRange.style.borderColor = color;
        } else {
          sumBlockRange.textContent = '‚Äì';
          sumBlockRange.style.background = '';
          sumBlockRange.style.borderColor = '';
        }
      }
    } catch {
      sumBlock.textContent = '';
      if (sumBlockRange) sumBlockRange.textContent = '';
    }
  });
}


// --- –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É–º–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç –∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
document.addEventListener('DOMContentLoaded', function() {
  const minDateInput = document.getElementById('charts-min-date');
  const dateInput = document.getElementById('date-input');
  if (minDateInput) minDateInput.addEventListener('change', updateParameterSums);
  if (dateInput) dateInput.addEventListener('change', updateParameterSums);
  updateParameterSums();
});

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ---
function saveSortState(type, direction) {
  localStorage.setItem('diary_sort', JSON.stringify({type, direction}));
}
function clearSortState() {
  localStorage.removeItem('diary_sort');
}
function loadSortState() {
  try {
    return JSON.parse(localStorage.getItem('diary_sort'));
  } catch { return null; }
}

(function() {
  // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
  const sortBtn = document.querySelector('.sort-btn[data-sort="name"]');
  const sortArrow = sortBtn ? sortBtn.querySelector('.sort-arrow') : null;
  const sortBtnValue = document.querySelector('.sort-btn[data-sort="value"]');
  const sortArrowValue = sortBtnValue ? sortBtnValue.querySelector('.sort-arrow') : null;
  const sortBtnPred = document.querySelector('.sort-btn[data-sort="prediction"]');
  const sortArrowPred = sortBtnPred ? sortBtnPred.querySelector('.sort-arrow') : null;

  let sortState = 0, sortStateValue = 0, sortStatePred = 0;

  function getParamBlocks() {
    return Array.from(document.querySelectorAll('.parameter-block'));
  }

  function moveCommentFormToBottom() {
    const form = document.querySelector('form[method="post"]');
    const container = document.querySelector('.container');
    if (form && container) container.appendChild(form);
  }

  function sortByName(direction) {
    const blocks = getParamBlocks();
    blocks.sort((a, b) => {
      const nameA = a.querySelector('.param-title').textContent.trim().toLowerCase();
      const nameB = b.querySelector('.param-title').textContent.trim().toLowerCase();
      if (nameA < nameB) return direction === 1 ? -1 : 1;
      if (nameA > nameB) return direction === 1 ? 1 : -1;
      return 0;
    });
    const parent = blocks[0].parentNode;
    blocks.forEach(block => parent.appendChild(block));
    moveCommentFormToBottom();
  }

  function getSelectedValue(block) {
    const btn = block.querySelector('.value-button.selected');
    if (!btn) return -1;
    return parseInt(btn.getAttribute('data-value'), 10);
  }

  function sortByValue(direction) {
    const blocks = getParamBlocks();
    blocks.sort((a, b) => {
      const valA = getSelectedValue(a);
      const valB = getSelectedValue(b);
      if (valA < valB) return direction === 1 ? -1 : 1;
      if (valA > valB) return direction === 1 ? 1 : -1;
      return 0;
    });
    const parent = blocks[0].parentNode;
    blocks.forEach(block => parent.appendChild(block));
    moveCommentFormToBottom();
  }

  function getPredictionValue(block) {
    const pred = block.querySelector('.predicted');
    if (!pred) return -Infinity;
    const val = pred.textContent.trim().replace(',', '.');
    const match = val.match(/([\d\.\-]+)/);
    if (!match) return -Infinity;
    const num = parseFloat(match[1]);
    return isNaN(num) ? -Infinity : num;
  }

  function sortByPrediction(direction) {
    const blocks = getParamBlocks();
    blocks.sort((a, b) => {
      const valA = getPredictionValue(a);
      const valB = getPredictionValue(b);
      if (valA < valB) return direction === 1 ? -1 : 1;
      if (valA > valB) return direction === 1 ? 1 : -1;
      return 0;
    });
    const parent = blocks[0].parentNode;
    blocks.forEach(block => parent.appendChild(block));
    moveCommentFormToBottom();
  }

  function resetAllSortStates(except) {
    if (except !== 'name') {
      sortState = 0;
      if (sortArrow) sortArrow.textContent = '';
      if (sortBtn) sortBtn.classList.remove('active');
    }
    if (except !== 'value') {
      sortStateValue = 0;
      if (sortArrowValue) sortArrowValue.textContent = '';
      if (sortBtnValue) sortBtnValue.classList.remove('active');
    }
    if (except !== 'prediction') {
      sortStatePred = 0;
      if (sortArrowPred) sortArrowPred.textContent = '';
      if (sortBtnPred) sortBtnPred.classList.remove('active');
    }
  }

  function updateArrow() {
    if (!sortArrow) return;
    if (sortState === 1) {
      sortArrow.textContent = '‚ñ≤';
      sortBtn.classList.add('active');
    } else if (sortState === 2) {
      sortArrow.textContent = '‚ñº';
      sortBtn.classList.add('active');
    } else {
      sortArrow.textContent = '';
      sortBtn.classList.remove('active');
    }
  }
  function updateArrowValue() {
    if (!sortArrowValue) return;
    if (sortStateValue === 1) {
      sortArrowValue.textContent = '‚ñ≤';
      sortBtnValue.classList.add('active');
    } else if (sortStateValue === 2) {
      sortArrowValue.textContent = '‚ñº';
      sortBtnValue.classList.add('active');
    } else {
      sortArrowValue.textContent = '';
      sortBtnValue.classList.remove('active');
    }
  }
  function updateArrowPred() {
    if (!sortArrowPred) return;
    if (sortStatePred === 1) {
      sortArrowPred.textContent = '‚ñ≤';
      sortBtnPred.classList.add('active');
    } else if (sortStatePred === 2) {
      sortArrowPred.textContent = '‚ñº';
      sortBtnPred.classList.add('active');
    } else {
      sortArrowPred.textContent = '';
      sortBtnPred.classList.remove('active');
    }
  }

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  if (sortBtn) {
    sortBtn.addEventListener('click', function() {
      resetAllSortStates('name');
      sortState = (sortState + 1) % 3;
      if (sortState === 1) {
        sortByName(1);
        saveSortState('name', 1);
      } else if (sortState === 2) {
        sortByName(-1);
        saveSortState('name', -1);
      } else {
        window.location.reload();
        clearSortState();
      }
      updateArrow();
    });
  }
  if (sortBtnValue) {
    sortBtnValue.addEventListener('click', function() {
      resetAllSortStates('value');
      sortStateValue = (sortStateValue + 1) % 3;
      if (sortStateValue === 1) {
        sortByValue(1);
        saveSortState('value', 1);
      } else if (sortStateValue === 2) {
        sortByValue(-1);
        saveSortState('value', -1);
      } else {
        window.location.reload();
        clearSortState();
      }
      updateArrowValue();
    });
  }
  if (sortBtnPred) {
    sortBtnPred.addEventListener('click', function() {
      resetAllSortStates('prediction');
      sortStatePred = (sortStatePred + 1) % 3;
      if (sortStatePred === 1) {
        sortByPrediction(1);
        saveSortState('prediction', 1);
      } else if (sortStatePred === 2) {
        sortByPrediction(-1);
        saveSortState('prediction', -1);
      } else {
        window.location.reload();
        clearSortState();
      }
      updateArrowPred();
    });
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', function() {
    const state = loadSortState && loadSortState();
    if (!state) return;
    if (state.type === 'name') {
      sortState = state.direction === 1 ? 1 : 2;
      sortByName(state.direction);
      updateArrow();
    } else if (state.type === 'value') {
      sortStateValue = state.direction === 1 ? 1 : 2;
      sortByValue(state.direction);
      updateArrowValue();
    } else if (state.type === 'prediction') {
      sortStatePred = state.direction === 1 ? 1 : 2;
      sortByPrediction(state.direction);
      updateArrowPred();
    }
  });

})();

// --- –§–æ–∫—É—Å: —Å–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
function setFocusMode(enabled) {
  document.querySelectorAll('.parameter-block .rating-buttons').forEach(block => {
    block.style.display = enabled ? 'none' : '';
  });
  const btn = document.getElementById('focus-toggle-btn');
  if (btn) btn.classList.toggle('active', enabled);
}

function saveFocusModeState(enabled) {
  localStorage.setItem('diary_focus_mode', enabled ? '1' : '0');
}

function loadFocusModeState() {
  const val = localStorage.getItem('diary_focus_mode');
  if (val === null) return false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
  return val === '1';
}

function setupFocusToggleBtn() {
  const btn = document.getElementById('focus-toggle-btn');
  if (!btn) return;
  btn.addEventListener('click', function() {
    const nowEnabled = !loadFocusModeState();
    setFocusMode(nowEnabled);
    saveFocusModeState(nowEnabled);
  });
  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  setFocusMode(loadFocusModeState());
}