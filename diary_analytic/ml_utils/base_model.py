import pandas as pd
from sklearn.linear_model import LinearRegression
import logging
import datetime
import os

logger = logging.getLogger(__name__)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
logs_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
os.makedirs(logs_dir, exist_ok=True)
my_test_log_path = os.path.join(logs_dir, 'my_test.log')
base_model_log_path = os.path.join(logs_dir, 'base_model.log')

# –õ–æ–≥–≥–µ—Ä –¥–ª—è base_model.log
base_model_logger = logging.getLogger("base_model")
base_model_logger.handlers.clear()
base_model_logger.propagate = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ª–æ–≥–æ–≤ root-–ª–æ–≥–≥–µ—Ä—É
try:
    base_model_handler = logging.FileHandler(base_model_log_path, mode="a", encoding="utf-8")
    base_model_handler.setFormatter(logging.Formatter("[%(asctime)s] %(message)s"))
    base_model_logger.addHandler(base_model_handler)
    base_model_logger.setLevel(logging.DEBUG)
except Exception as e:
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–≥–µ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    pass

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
my_test_logger = logging.getLogger("my_test")
my_test_logger.handlers.clear()
try:
    my_test_handler = logging.FileHandler(my_test_log_path, mode="a", encoding="utf-8")
    my_test_handler.setFormatter(logging.Formatter("[%(asctime)s] %(message)s"))
    my_test_logger.addHandler(my_test_handler)
    my_test_logger.setLevel(logging.DEBUG)
except Exception as e:
    base_model_logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ my_test_handler: %s", e)

DROP_ALWAYS = ["date", "–î–∞—Ç–∞", "–¥–∞—Ç–∞", "index"]

def train_model(
    df: pd.DataFrame,
    target: str,
    *,
    exclude: list[str] | None = None,
):
    base_model_logger.info("=== train_model –≤—ã–∑–≤–∞–Ω –¥–ª—è target=%s ===", target)
    my_test_logger.debug("=== train_model –≤—ã–∑–≤–∞–Ω –¥–ª—è target=%s ===", target)
    if exclude is None:
        exclude = []
    df = df.reset_index()
    drop_cols = DROP_ALWAYS + exclude + [target]
    X = df.drop(columns=drop_cols, errors="ignore")

    # –õ–æ–≥–∏—Ä—É–µ–º shape –∏ —Ç–∏–ø—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    base_model_logger.debug(f"=== train_model: target={target} ===")
    base_model_logger.debug(f"df.shape: {df.shape}")
    base_model_logger.debug(f"df.dtypes: {df.dtypes}")
    base_model_logger.debug(f"df.head():\n{df.head()}\n")
    base_model_logger.debug(f"X.shape: {X.shape}")
    base_model_logger.debug(f"X.dtypes: {X.dtypes}")
    base_model_logger.debug(f"X.head():\n{X.head()}\n")
    base_model_logger.debug(f"X unique types: {[set(type(x) for x in X[col]) for col in X.columns]}")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ date/datetime
    def has_date_value(series):
        return any(isinstance(x, (datetime.date, datetime.datetime)) for x in series)
    date_cols = [col for col in X.columns if has_date_value(X[col])]
    if date_cols:
        logger.warning("–£–¥–∞–ª—è—é —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–∞–º–∏: %s", date_cols)
        X = X.drop(columns=date_cols)
        my_test_logger.debug(f"–£–¥–∞–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–∞–º–∏: {date_cols}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    # X = X.select_dtypes(include=["number"]).fillna(0.0)
    y = df[target]

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ y == NaN
    mask_y = ~y.isna()
    X = X[mask_y]
    y = y[mask_y]

    # ‚õîÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ X ‚Äî NaN
    mask_X = ~X.isna().any(axis=1)
    X = X[mask_X]
    y = y[mask_X]
    base_model_logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å NaN –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö: {len(mask_y) - mask_X.sum()}")
    my_test_logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å NaN –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö: {len(mask_y) - mask_X.sum()}")

    my_test_logger.debug(f"y.name: {y.name}")
    my_test_logger.debug(f"y.dtype: {y.dtype}")
    my_test_logger.debug(f"y.head():\n{y.head()}\n")
    my_test_logger.debug(f"y unique types: {set(type(x) for x in y)}")
    my_test_logger.debug(f"--- END train_model: target={target} ---\n")

    # üõ° –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —á–∏—Å–ª–æ–≤–∞—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if not pd.api.types.is_numeric_dtype(df[target]):
        logger.warning("train_model: –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è %s –Ω–µ —á–∏—Å–ª–æ–≤–∞—è (—Ç–∏–ø %s), –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", target, df[target].dtype)
        return {"model": None, "features": []}

    logger.debug("train_model: target=%s, X_shape=%s, exclude=%s", target, X.shape, exclude)
    logger.debug("train_model: X.columns = %s", list(X.columns))

    for h in logger.handlers:
        try:
            h.flush()
        except Exception:
            pass

    if X.shape[1] == 0:
        logger.warning("train_model: –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è '%s' ‚Äî –Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (X –ø—É—Å—Ç)", target)
        for h in logger.handlers:
            try:
                h.flush()
            except Exception:
                pass
        return {"model": None, "features": []}

    model = LinearRegression()
    model.fit(X, y)

    logger.debug("trained %s: intercept=%.3f", target, model.intercept_)
    for h in logger.handlers:
        try:
            h.flush()
        except Exception:
            pass

    return {"model": model, "features": X.columns.tolist()} 