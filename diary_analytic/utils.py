# diary_analytic/utils.py

"""
üìä utils.py ‚Äî —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏

–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    - get_diary_dataframe() ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–µ–π Entry, Parameter, EntryValue
      –≤ —à–∏—Ä–æ–∫—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π.
    - get_today_row(date) ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
"""

import pandas as pd
from datetime import date
from .models import EntryValue, Entry, Parameter
import os
from .loggers import db_logger


# --------------------------------------------------------------------
# üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame –¥–ª—è ML
# --------------------------------------------------------------------

def get_diary_dataframe() -> pd.DataFrame:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ ¬´—à–∏—Ä–æ–∫–æ–π¬ª —Ç–∞–±–ª–∏—Ü—ã:
        - —Å—Ç—Ä–æ–∫–∏: –¥–∞—Ç—ã (Entry.date)
        - —Å—Ç–æ–ª–±—Ü—ã: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Parameter.key)
        - –∑–Ω–∞—á–µ–Ω–∏—è: –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (EntryValue.value)

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        - –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π (`train`)
        - –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è today_row (`predict_today`)
        - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏

    üì¶ –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ DataFrame:

        |     date     | toshn | ustalost | trevozhnost |
        |--------------|-------|----------|-------------|
        | 2025-05-10   | 1.0   | 2.0      | 4.0         |
        | 2025-05-11   | 0.0   | NaN      | 3.0         |
        | 2025-05-12   | NaN   | 1.0      | NaN         |

    :return: pd.DataFrame, –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
    """

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Entry –∏ Parameter
    values = EntryValue.objects.select_related("entry", "parameter")

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (—É–¥–æ–±–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ DataFrame)
    rows = []
    for val in values:
        rows.append({
            "date": val.entry.date,             # –î–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ = –¥–µ–Ω—å)
            "parameter": val.parameter.key,     # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∫–ª—é—á)
            "value": val.value                  # –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.0 –¥–æ 5.0
        })

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "—É–∑–∫–∏–π" DataFrame
    df = pd.DataFrame(rows)

    if df.empty:
        return pd.DataFrame()  # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —É–∑–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ "—à–∏—Ä–æ–∫–∏–π":
    # –±—ã–ª–æ: date | parameter | value
    # —Å—Ç–∞–Ω–µ—Ç: date | toshn | ustalost | ...
    df = df.pivot(index="date", columns="parameter", values="value")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    df.sort_index(inplace=True)

    # –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø–æ –¢–ó: —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
    # df.fillna(0.0, inplace=True)

    return df


# --------------------------------------------------------------------
# üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å (–¥–ª—è –º–æ–¥–µ–ª–∏)
# --------------------------------------------------------------------

def get_today_row(target_date: date) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
        - –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

    –ü—Ä–æ–ø—É—Å–∫–∏ (NaN) –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

    :param target_date: –¥–∞—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    :return: dict ‚Äî { "ustalost": 2.0, "toshn": 0.0, ... }
    """

    df = get_diary_dataframe()
    if df.empty or target_date not in df.index:
        return {}

    return df.loc[target_date].dropna().to_dict()


def export_diary_to_csv(filepath=None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ CSV-—Ñ–∞–π–ª (—à–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –∫–∞–∫ –ö–æ—Ä–æ—Ç–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞3.csv).
    –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç/—Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    –í–ù–ò–ú–ê–ù–ò–ï: –µ—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –∫–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—Ç–∞—Ä—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á.
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.
    :param filepath: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é other/export.csv)
    """
    if filepath is None:
        filepath = os.path.join("other", "export.csv")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ name, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        parameters = list(Parameter.objects.order_by("name"))
        param_keys = [p.key for p in parameters]
        param_names = [p.name for p in parameters]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Entry (–¥–∞—Ç—ã)
        entries = list(Entry.objects.order_by("-date"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è DataFrame
        data = []
        for entry in entries:
            row = {"–î–∞—Ç–∞": entry.date.strftime("%d.%m.%y")}
            values = {ev.parameter_id: ev.value for ev in entry.entryvalue_set.all()}
            for p in parameters:
                val = values.get(p.id, None)
                if val is None:
                    row[p.name] = ""
                else:
                    row[p.name] = int(val)
            data.append(row)

        import pandas as pd
        df = pd.DataFrame(data)
        # –°—Ç–∞–≤–∏–º "–î–∞—Ç–∞" –ø–µ—Ä–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –∫–∞–∫ –≤ param_names
        columns = ["–î–∞—Ç–∞"] + param_names
        df = df[columns]

        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        if filepath.endswith('.xlsx'):
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, encoding="utf-8-sig", sheet_name="–î–∞–Ω–Ω—ã–µ")
                # –û–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
                desc_df = pd.DataFrame({
                    "–ö–ª—é—á": [p.key for p in parameters],
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": [p.name for p in parameters],
                    "–û–ø–∏—Å–∞–Ω–∏–µ": [p.description or "" for p in parameters],
                })
                desc_df.to_excel(writer, index=False, encoding="utf-8-sig", sheet_name="–û–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        else:
            # CSV: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            df.to_csv(filepath, index=False, encoding="utf-8-sig")
            desc_path = filepath.replace('.csv', '_descriptions.csv')
            desc_df = pd.DataFrame({
                "–ö–ª—é—á": [p.key for p in parameters],
                "–ù–∞–∑–≤–∞–Ω–∏–µ": [p.name for p in parameters],
                "–û–ø–∏—Å–∞–Ω–∏–µ": [p.description or "" for p in parameters],
            })
            desc_df.to_csv(desc_path, index=False, encoding="utf-8-sig")
        db_logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV –∑–∞–≤–µ—Ä—à—ë–Ω: {filepath}, —Å—Ç—Ä–æ–∫: {len(df)}")
    except Exception as e:
        db_logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV: {e}")
