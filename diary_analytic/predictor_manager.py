# diary_analytic/predictor_manager.py

"""
üß† PredictorManager ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏;
    - –∞–±—Å—Ç—Ä–∞–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: base_model, flags_model –∏ –¥—Ä.;
    - –∏–∑–æ–ª–∏—Ä—É–µ—Ç ML-–ª–æ–≥–∏–∫—É –æ—Ç views –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π Django-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
    - –ª–æ–≥–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏: –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ—à–∏–±–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—å—é—Ö–∞—Ö:
    - –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:    manager.predict_today(strategy=..., ...)
    - –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: manager.train(strategy=..., ...)
"""

from diary_analytic.ml_utils import get_model
from .loggers import predict_logger
import os
import pandas as pd
from pprint import pformat
import joblib
from diary_analytic.models import Parameter


# -------------------------------------------------------------
# üì¶ –û–±—â–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------------------------------------

class PredictorManager:
    """
    –ö–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤—ã–∑–æ–≤–æ–º –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """

    def __init__(self, strategy: str):
        self.strategy = strategy
        self.model_module = get_model(strategy)

    def save_model(self, model, features, target):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ .pkl-—Ñ–∞–π–ª.
        """
        model_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "diary_analytic", "trained_models", self.strategy)
        os.makedirs(model_dir, exist_ok=True)
        file_path = os.path.join(model_dir, f"{target}.pkl")
        joblib.dump({"model": model, "features": features}, file_path)
        predict_logger.info(f"[save_model] ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")

    def save_model_coefs(self, model, features, target):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–¥–µ–ª–∏ –≤ CSV-—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        –¢–µ–ø–µ—Ä—å –≤ —Å—Ç–æ–ª–±—Ü–µ 'feature' –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–µ key, –∞ name.
        """
        predict_logger.info(f"[save_model_coefs] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã. –ú–æ–¥–µ–ª—å: {type(model)}, features: {features}")
        if model and hasattr(model, "coef_"):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ key -> name
                key_to_name = {p.key: p.name for p in Parameter.objects.all()}
                feature_names = [key_to_name.get(f, f) for f in features]
                coef_df = pd.DataFrame({
                    "feature": feature_names,
                    "coef": model.coef_
                })
                coef_df["intercept"] = model.intercept_
                export_dir = os.path.join(
                    os.path.dirname(os.path.dirname(__file__)),
                    "diary_analytic", "trained_models", self.strategy, "csv"
                )
                os.makedirs(export_dir, exist_ok=True)
                export_path = os.path.join(export_dir, f"{target}_{self.strategy}_coefs.csv")
                predict_logger.info(f"[save_model_coefs] –°–æ—Ö—Ä–∞–Ω—è—é CSV –ø–æ –ø—É—Ç–∏: {export_path}")
                coef_df.to_csv(export_path, index=False)
                predict_logger.info(f"[save_model_coefs] CSV —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {export_path}")
            except Exception as e:
                predict_logger.error(f"[save_model_coefs] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
        else:
            predict_logger.warning(f"[save_model_coefs] –ú–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç coef_ –∏–ª–∏ model=None. model: {type(model)}, features: {features}")

    def train(self, df):
        """
        –û–±—É—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫—Ä–æ–º–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö) –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        :param df: –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É target
        """
        results = []
        for target in df.columns:
            if target in ("date", "–î–∞—Ç–∞", "comment"):
                continue
            predict_logger.info(f"[train] ‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.strategy}, target={target}, df.columns={list(df.columns)}")
            try:
                result = self.model_module.train_model(df.copy(), target=target, exclude=[])
                model = result.get("model")
                features = result.get("features")
                if model:
                    self.save_model(model, features, target)
                    self.save_model_coefs(model, features, target)
                    msg = f"[{self.strategy}] ‚úÖ –û–±—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {target}"
                    predict_logger.info("[train] " + msg)
                    results.append(msg)
                else:
                    msg = f"[{self.strategy}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {target}"
                    predict_logger.warning("[train] " + msg)
                    results.append(msg)
            except Exception as e:
                msg = f"[{self.strategy}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {target}: {e}"
                predict_logger.exception("[train] " + msg)
                results.append(msg)
        return results

    # -----------------------------------------------------------------
    # üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    # -----------------------------------------------------------------

    def predict_today(self, strategy: str, model, today_row: dict) -> float:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

        :param strategy: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'base')
        :param model: –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–∞—è –∏–∑ train()
        :param today_row: —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º)

        :return: float-–ø—Ä–æ–≥–Ω–æ–∑ (–∏–ª–∏ np.nan/null –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
        """
        predict_logger.debug(f"üì• [predict_today] –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}, –î–∞–Ω–Ω—ã–µ: {today_row}")
        try:
            if strategy == "base":
                return get_model("base").predict(model["model"], model["features"], today_row)
            elif strategy == "flags":
                return get_model("flags").predict(model["model"], model["features"], today_row) 
            else:
                raise ValueError(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {strategy}")

        except Exception as e:
            predict_logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ predict_today (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}) ‚Äî {str(e)}")
            return None

    def predict_for_date(self, date):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
        :param date: –¥–∞—Ç–∞ (datetime.date)
        :return: dict {param_key: value, ...}
        """
        from diary_analytic.utils import get_today_row
        import os
        import joblib
        import pandas as pd
        row = get_today_row(date)
        predictions = {}
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        model_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "diary_analytic", "trained_models", self.strategy)
        if not os.path.exists(model_dir):
            return predictions
        for fname in os.listdir(model_dir):
            if not fname.endswith(".pkl"):
                continue
            param_key = fname.replace(".pkl", "")
            model_path = os.path.join(model_dir, fname)
            try:
                model_dict = joblib.load(model_path)
                if isinstance(model_dict, dict) and "model" in model_dict:
                    model = model_dict["model"]
                    features = model_dict.get("features", None)
                else:
                    model = model_dict
                    features = None
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥ –¥–ª—è –º–æ–¥–µ–ª–∏
                if features is not None:
                    X = pd.DataFrame([{f: row.get(f, 0.0) for f in features}])
                    value = float(model.predict(X)[0])
                elif hasattr(model, 'feature_names_in_'):
                    X = pd.DataFrame([{f: row.get(f, 0.0) for f in model.feature_names_in_}])
                    value = float(model.predict(X)[0])
                else:
                    X = pd.DataFrame([row])
                    value = float(model.predict(X)[0])
                predictions[param_key] = round(value, 2)
            except Exception as e:
                predictions[param_key] = None
        return predictions
